"""
M√≥dulo de Interfaz Gr√°fica para la Aplicaci√≥n de Diario Emocional

Este m√≥dulo contiene la interfaz gr√°fica principal de la aplicaci√≥n de diario emocional.
Proporciona una interfaz moderna y amigable que integra grabaci√≥n de voz, an√°lisis de
emociones, generaci√≥n de respuestas emp√°ticas y visualizaci√≥n en tiempo real de la c√°mara.

Dependencias principales:
    - tkinter: Framework de GUI base
    - customtkinter: Framework de GUI moderno con temas
    - PIL (Pillow): Procesamiento de im√°genes
    - cv2 (OpenCV): Captura y procesamiento de video
    - threading: Manejo de hilos para grabaci√≥n as√≠ncrona
    - speech_recognition: Reconocimiento de voz
    - transformers: Modelos de IA para clasificaci√≥n de emociones
    - empathy: M√≥dulo personalizado para respuestas emp√°ticas

Funcionalidades principales:
    - Interfaz gr√°fica moderna con tema oscuro
    - Grabaci√≥n de voz en tiempo real
    - Procesamiento de texto escrito
    - An√°lisis autom√°tico de emociones
    - Generaci√≥n de respuestas emp√°ticas
    - Visualizaci√≥n de c√°mara en vivo
    - Chat log con timestamps
    - Guardado autom√°tico de conversaciones
"""

import tkinter as tk
import customtkinter as ctk
import threading
import time
import datetime

# Importaciones lazy - se cargar√°n solo cuando se necesiten
# from PIL import Image, ImageTk
# import cv2
# import speech_recognition as sr
# from empathy import EmpatheticResponseGenerator
# from transformers import pipeline

# ==================== CONFIGURACIONES INICIALES ====================

# Configurar tema visual de la aplicaci√≥n
# Modo oscuro para una experiencia visual moderna y c√≥moda
ctk.set_appearance_mode("dark")
ctk.set_default_color_theme("blue")

# Variables globales para lazy loading
emotion_classifier = None
cv2 = None
sr = None
Image = None
ImageTk = None
EmpatheticResponseGenerator = None

def load_ai_models():
    """
    Carga los modelos de IA de forma lazy cuando se necesiten.
    """
    global emotion_classifier
    if emotion_classifier is None:
        from transformers import pipeline
        # Inicializar clasificador de emociones usando modelo preentrenado
        # Utiliza DistilRoBERTa optimizado para clasificaci√≥n de emociones en ingl√©s
        emotion_classifier = pipeline(
            "text-classification", 
            model="j-hartmann/emotion-english-distilroberta-base", 
            return_all_scores=False
        )
    return emotion_classifier

def load_cv2():
    """
    Carga OpenCV de forma lazy cuando se necesite.
    """
    global cv2
    if cv2 is None:
        import cv2 as cv2_module
        cv2 = cv2_module
    return cv2

def load_speech_recognition():
    """
    Carga SpeechRecognition de forma lazy cuando se necesite.
    """
    global sr
    if sr is None:
        import speech_recognition as sr_module
        sr = sr_module
    return sr

def load_pil():
    """
    Carga PIL de forma lazy cuando se necesite.
    """
    global Image, ImageTk
    if Image is None:
        from PIL import Image as Image_module, ImageTk as ImageTk_module
        Image = Image_module
        ImageTk = ImageTk_module
    return Image, ImageTk

def load_empathy():
    """
    Carga el generador emp√°tico de forma lazy cuando se necesite.
    """
    global EmpatheticResponseGenerator
    if EmpatheticResponseGenerator is None:
        from empathy import EmpatheticResponseGenerator as EmpGen
        EmpatheticResponseGenerator = EmpGen
    return EmpatheticResponseGenerator

# ==================== CLASE PRINCIPAL ====================

class EmotionalDiaryApp:
    """
    Aplicaci√≥n Principal del Diario Emocional
    
    Esta clase gestiona toda la interfaz gr√°fica y l√≥gica de la aplicaci√≥n.
    Integra m√∫ltiples componentes para crear una experiencia completa de
    diario emocional con an√°lisis en tiempo real.
    
    Atributos principales:
        window: Ventana principal de CustomTkinter
        recognizer: Reconocedor de voz de speech_recognition
        is_recording: Estado de grabaci√≥n de voz
        empathetic_generator: Generador de respuestas emp√°ticas
        camera_on: Estado de la c√°mara
        cap: Capturador de video de OpenCV
        
    Componentes de interfaz:
        - main_frame: Marco principal de la aplicaci√≥n
        - camera_label: Label para mostrar video de c√°mara
        - record_button: Bot√≥n de grabaci√≥n de voz
        - send_button: Bot√≥n para enviar texto
        - chat_display: √Årea de visualizaci√≥n del chat
        - input_box: Campo de entrada de texto
    """
    
    def __init__(self, return_to_menu=None):
        """
        Inicializa la aplicaci√≥n del diario emocional.
        
        Configura todos los componentes necesarios:
        - Ventana principal con CustomTkinter
        - Reconocedor de voz
        - Generador de respuestas emp√°ticas
        - Captura de c√°mara
        - Interfaz de usuario
        - Bucle de actualizaci√≥n de c√°mara
        
        Args:
            return_to_menu: Funci√≥n callback para regresar al men√∫ principal
        """
        # Guardar callback para navegaci√≥n
        self.return_to_menu = return_to_menu
        
        # Configurar ventana principal
        self.window = ctk.CTk()
        self.window.title("Diario Emocional")
        self.window.geometry("1000x800")
        
        # Configurar protocolo de cierre
        if self.return_to_menu:
            self.window.protocol("WM_DELETE_WINDOW", self.on_closing)

        # Inicializar componentes de reconocimiento de voz (lazy loading)
        self.recognizer = None
        self.is_recording = False
        
        # Inicializar generador de respuestas emp√°ticas (lazy loading)
        self.empathetic_generator = None

        # Configurar captura de c√°mara (lazy loading)
        self.camera_on = True
        self.cap = None

        # Construir interfaz de usuario
        self.build_ui()
        
        # Iniciar actualizaci√≥n de c√°mara solo si se activa
        if self.camera_on:
            self.init_camera()
            self.update_camera()

    def init_camera(self):
        """
        Inicializa la c√°mara de forma lazy cuando se necesite.
        """
        if self.cap is None:
            cv2_module = load_cv2()
            self.cap = cv2_module.VideoCapture(0)
    
    def init_speech_recognition(self):
        """
        Inicializa el reconocimiento de voz de forma lazy cuando se necesite.
        """
        if self.recognizer is None:
            sr_module = load_speech_recognition()
            self.recognizer = sr_module.Recognizer()
    
    def init_empathy_generator(self):
        """
        Inicializa el generador emp√°tico de forma lazy cuando se necesite.
        """
        if self.empathetic_generator is None:
            EmpGen = load_empathy()
            self.empathetic_generator = EmpGen()

    def build_ui(self):
        """
        Construye la interfaz de usuario completa.
        
        Crea y organiza todos los elementos de la interfaz:
        - Marco principal
        - Visualizaci√≥n de c√°mara
        - Botones de control (grabar voz, enviar texto)
        - √Årea de chat con scroll
        - Campo de entrada de texto
        
        Layout:
        - C√°mara en la parte superior
        - Botones de control en el centro
        - Chat log expandible
        - Campo de entrada en la parte inferior
        """
        # Crear marco principal que contiene todos los elementos
        self.main_frame = ctk.CTkFrame(self.window)
        self.main_frame.pack(fill="both", expand=True, padx=20, pady=20)

        # Marco superior para navegaci√≥n
        if self.return_to_menu:
            nav_frame = ctk.CTkFrame(self.main_frame)
            nav_frame.pack(fill="x", pady=(0, 10))
            
            menu_btn = ctk.CTkButton(nav_frame, text="üè† Men√∫ Principal", 
                                   command=self.go_to_menu, width=120)
            menu_btn.pack(side="left", padx=5)
            
            viewer_btn = ctk.CTkButton(nav_frame, text="üìö Ver Historial", 
                                     command=self.go_to_viewer, width=120)
            viewer_btn.pack(side="left", padx=5)

        # Visualizaci√≥n de c√°mara en tiempo real
        self.camera_label = ctk.CTkLabel(self.main_frame, text="C√°mara")
        self.camera_label.pack(pady=5)

        # Marco para botones de control organizados horizontalmente
        button_frame = ctk.CTkFrame(self.main_frame)
        button_frame.pack(pady=10)

        # Bot√≥n de grabaci√≥n de voz con toggle de estado
        self.record_button = ctk.CTkButton(button_frame, text="üéôÔ∏è Grabar voz", command=self.toggle_recording)
        self.record_button.grid(row=0, column=0, padx=10)

        # Bot√≥n para procesar entrada de texto manual
        self.send_button = ctk.CTkButton(button_frame, text="‚úâÔ∏è Enviar texto", command=self.process_text_input)
        self.send_button.grid(row=0, column=1, padx=10)

        # √Årea de visualizaci√≥n del chat con scroll autom√°tico
        self.chat_display = ctk.CTkTextbox(self.main_frame, height=300, wrap="word")
        self.chat_display.pack(padx=10, pady=10, fill="both", expand=False)
        self.chat_display.insert("1.0", "[Diario iniciado]\n")
        self.chat_display.configure(state="disabled")

        # Campo de entrada de texto con placeholder y binding de Enter
        self.input_box = ctk.CTkEntry(self.main_frame, placeholder_text="Escribe tu mensaje aqu√≠...", width=800)
        self.input_box.pack(padx=10, pady=(0,10))
        self.input_box.bind("<Return>", lambda event: self.process_text_input())

    def toggle_recording(self):
        """
        Alterna el estado de grabaci√≥n de voz entre activo e inactivo.
        
        Maneja el inicio y detenci√≥n de la grabaci√≥n de voz:
        - Si no est√° grabando: inicia grabaci√≥n en hilo separado
        - Si est√° grabando: detiene la grabaci√≥n
        - Actualiza la interfaz del bot√≥n seg√∫n el estado
        
        Threading:
        La grabaci√≥n se ejecuta en un hilo separado para evitar bloquear
        la interfaz de usuario durante el proceso de escucha.
        """
        if not self.is_recording:
            # Inicializar reconocimiento de voz si no est√° cargado
            self.init_speech_recognition()
            # Iniciar grabaci√≥n
            self.is_recording = True
            self.record_button.configure(text="‚èπÔ∏è Detener")
            # Ejecutar grabaci√≥n en hilo separado para no bloquear UI
            threading.Thread(target=self.record_audio).start()
        else:
            # Detener grabaci√≥n
            self.is_recording = False
            self.record_button.configure(text="üéôÔ∏è Grabar voz")

    def record_audio(self):
        """
        Graba audio de forma continua mientras el estado de grabaci√≥n est√© activo.
        
        Proceso de grabaci√≥n:
        1. Utiliza el micr√≥fono como fuente de audio
        2. Escucha continuamente con timeout de 1 segundo
        3. Reconoce texto usando Google Speech Recognition (espa√±ol)
        4. A√±ade el texto reconocido al chat
        5. Genera respuesta emp√°tica autom√°ticamente
        
        Manejo de errores:
        - Timeouts de escucha se ignoran para continuar grabaci√≥n
        - Errores de reconocimiento se ignoran silenciosamente
        - La grabaci√≥n contin√∫a hasta que se desactive el estado
        
        Configuraci√≥n:
        - Idioma: Espa√±ol de Espa√±a (es-ES)
        - Timeout: 1 segundo para evitar bloqueos largos
        """
        sr_module = load_speech_recognition()
        with sr_module.Microphone() as source:
            while self.is_recording:
                try:
                    # Escuchar audio con timeout corto para responsividad
                    audio = self.recognizer.listen(source, timeout=1)
                    # Reconocer texto en espa√±ol
                    text = self.recognizer.recognize_google(audio, language="es-ES")
                    # Mostrar texto reconocido en chat
                    self.append_chat("T√∫", text)
                    # Generar respuesta emp√°tica autom√°tica
                    self.generate_response(text)
                except:
                    # Continuar grabaci√≥n ignorando errores temporales
                    continue

    def process_text_input(self):
        """
        Procesa la entrada de texto manual del usuario.
        
        Flujo de procesamiento:
        1. Obtiene el texto del campo de entrada
        2. Limpia el campo de entrada
        3. Muestra el texto en el chat como mensaje del usuario
        4. Genera respuesta emp√°tica basada en el texto
        
        Validaci√≥n:
        - Solo procesa si hay texto no vac√≠o
        - Limpia autom√°ticamente el campo despu√©s del env√≠o
        """
        text = self.input_box.get()
        if text:
            # Limpiar campo de entrada
            self.input_box.delete(0, tk.END)
            # Mostrar mensaje del usuario en chat
            self.append_chat("T√∫", text)
            # Procesar y generar respuesta emp√°tica
            self.generate_response(text)

    def generate_response(self, text):
        """
        Genera una respuesta emp√°tica basada en el an√°lisis emocional del texto.
        
        Proceso de generaci√≥n:
        1. Analiza el texto usando el clasificador de emociones DistilRoBERTa
        2. Obtiene la emoci√≥n principal detectada
        3. Utiliza el generador emp√°tico para crear respuesta personalizada
        4. Muestra la respuesta en el chat incluyendo la emoci√≥n detectada
        
        Manejo de errores:
        - Captura excepciones durante el an√°lisis o generaci√≥n
        - Muestra mensaje de error informativo en caso de fallo
        - Contin√∫a funcionando aunque falle una respuesta espec√≠fica
        
        Datos mostrados:
        - Respuesta emp√°tica generada
        - Emoci√≥n detectada (para logging y an√°lisis)
        """
        try:
            # Cargar modelos de IA si no est√°n cargados
            classifier = load_ai_models()
            self.init_empathy_generator()
            
            # Clasificar emoci√≥n usando modelo DistilRoBERTa
            emotion = classifier(text)[0]['label']
            # Generar respuesta emp√°tica personalizada
            response = self.empathetic_generator.generate_empathetic_response(text, emotion)
            # Mostrar respuesta del bot con emoci√≥n detectada
            self.append_chat("Bot", response, emotion)
        except Exception as e:
            # Mostrar error en caso de fallo en el procesamiento
            self.append_chat("Bot", f"Error generando respuesta emp√°tica: {e}")

    def append_chat(self, speaker, message, emotion="Input"):
        """
        A√±ade un nuevo mensaje al √°rea de chat con timestamp y logging autom√°tico.
        
        Funcionalidades:
        1. Genera timestamp actual en formato [HH:MM]
        2. Formatea el mensaje con speaker y contenido
        3. A√±ade el mensaje al √°rea de chat (habilitando/deshabilitando edici√≥n)
        4. Hace scroll autom√°tico para mostrar el √∫ltimo mensaje
        5. Guarda la entrada en el archivo de log
        
        Par√°metros:
            speaker (str): Identificador del emisor ("T√∫" o "Bot")
            message (str): Contenido del mensaje
            emotion (str): Emoci√≥n detectada (solo para respuestas del bot)
        
        Logging:
        - Mensajes del usuario: [timestamp] speaker: message
        - Respuestas del bot: [timestamp] speaker: message / emotion
        - Archivos guardados en ./logs/diario_emocional_log.txt
        """
        # Generar timestamp para el mensaje
        timestamp = datetime.datetime.now().strftime("[%H:%M]")
        
        # Habilitar edici√≥n temporal del √°rea de chat
        self.chat_display.configure(state="normal")
        # Insertar nuevo mensaje al final
        self.chat_display.insert(tk.END, f"{timestamp} {speaker}: {message}\n")
        # Deshabilitar edici√≥n para prevenir modificaciones del usuario
        self.chat_display.configure(state="disabled")
        # Scroll autom√°tico al √∫ltimo mensaje
        self.chat_display.see(tk.END)
        
        # Guardar en log con formato apropiado
        if (emotion != "Input"):
            # Guardar respuesta del bot con emoci√≥n detectada
            self.save_log(f"{timestamp} {speaker}: {message} / {emotion}\n")
        else:
            # Guardar mensaje del usuario sin emoci√≥n
            self.save_log(f"{timestamp} {speaker}: {message}\n")

    def save_log(self, entry):
        """
        Guarda una entrada en el archivo de log del diario emocional.
        
        Caracter√≠sticas del logging:
        - Archivo: ./logs/diario_emocional_log.txt
        - Codificaci√≥n: UTF-8 para soporte de caracteres especiales
        - Modo: Append (a√±adir) para preservar historial completo
        - Formato: Mismo formato que se muestra en la interfaz
        
        Par√°metros:
            entry (str): Entrada formateada lista para escribir al archivo
        
        Estructura del log:
        - Cada l√≠nea representa una interacci√≥n
        - Incluye timestamps, speakers y contenido
        - Las respuestas del bot incluyen emoci√≥n detectada
        """
        # Escribir entrada al archivo de log con codificaci√≥n UTF-8
        with open("./logs/diario_emocional_log.txt", "a", encoding="utf-8") as f:
            f.write(entry)

    def update_camera(self):
        """
        Actualiza la visualizaci√≥n de la c√°mara en tiempo real.
        
        Proceso de actualizaci√≥n:
        1. Verifica que la c√°mara est√© habilitada
        2. Captura frame actual de la c√°mara
        3. Redimensiona frame a 640x360 para interfaz
        4. Convierte color de BGR (OpenCV) a RGB (PIL)
        5. Convierte a formato compatible con Tkinter
        6. Actualiza el label de la c√°mara
        7. Programa siguiente actualizaci√≥n despu√©s de 30ms
        
        Caracter√≠sticas:
        - Actualizaci√≥n a ~33 FPS (cada 30ms)
        - Redimensionamiento autom√°tico para UI
        - Conversi√≥n de formato de color autom√°tica
        - Bucle continuo mientras la aplicaci√≥n est√© activa
        
        Manejo de errores:
        - Si no hay frame disponible, mantiene imagen anterior
        - Contin√∫a el bucle de actualizaci√≥n independientemente
        """
        if self.camera_on and self.cap is not None:
            # Cargar m√≥dulos necesarios
            cv2_module = load_cv2()
            Image_module, ImageTk_module = load_pil()
            
            # Capturar frame de la c√°mara
            ret, frame = self.cap.read()
            if ret:
                # Redimensionar frame para interfaz (640x360)
                frame = cv2_module.resize(frame, (640, 360))
                # Convertir de BGR (OpenCV) a RGB (PIL/Tkinter)
                frame = cv2_module.cvtColor(frame, cv2_module.COLOR_BGR2RGB)
                # Convertir a formato PIL
                img = Image_module.fromarray(frame)
                # Convertir a formato Tkinter
                imgtk = ImageTk_module.PhotoImage(image=img)
                # Actualizar label de c√°mara
                self.camera_label.configure(image=imgtk, text="")
                # Mantener referencia para evitar garbage collection
                self.camera_label.imgtk = imgtk
        
        # Programar siguiente actualizaci√≥n en 30ms
        self.window.after(30, self.update_camera)

    def run(self):
        """
        Inicia la aplicaci√≥n y maneja el ciclo principal.
        
        Funciones principales:
        1. Inicia el bucle principal de Tkinter (mainloop)
        2. Gestiona la limpieza de recursos al cerrar:
           - Libera la captura de c√°mara
           - Cierra ventanas de OpenCV
        
        Limpieza de recursos:
        - self.cap.release(): Libera el dispositivo de c√°mara
        - cv2.destroyAllWindows(): Cierra ventanas de OpenCV
        
        Esta funci√≥n bloquea hasta que se cierra la aplicaci√≥n.
        """
        # Iniciar bucle principal de la aplicaci√≥n
        self.window.mainloop()
        # Limpiar recursos al cerrar la aplicaci√≥n
        if self.cap is not None:
            self.cap.release()
        if cv2 is not None:
            cv2.destroyAllWindows()
    
    def on_closing(self):
        """
        Maneja el cierre de la ventana.
        """
        if self.cap is not None:
            self.cap.release()
        if cv2 is not None:
            cv2.destroyAllWindows()
        self.window.destroy()
        if self.return_to_menu:
            self.return_to_menu()
    
    def go_to_menu(self):
        """
        Navega al men√∫ principal.
        """
        if self.cap is not None:
            self.cap.release()
        if cv2 is not None:
            cv2.destroyAllWindows()
        self.window.destroy()
        if self.return_to_menu:
            self.return_to_menu()
    
    def go_to_viewer(self):
        """
        Navega al visor del historial.
        """
        if self.cap is not None:
            self.cap.release()
        if cv2 is not None:
            cv2.destroyAllWindows()
        self.window.destroy()
        if self.return_to_menu:
            from diary_viewer import DiaryViewerApp
            viewer = DiaryViewerApp(return_to_menu=self.return_to_menu)
            viewer.run()

# ==================== PUNTO DE ENTRADA PRINCIPAL ====================

if __name__ == "__main__":
    """
    Punto de entrada principal de la aplicaci√≥n.
    
    Crea una instancia de EmotionalDiaryApp y la ejecuta.
    Este bloque solo se ejecuta cuando el archivo se ejecuta directamente,
    no cuando se importa como m√≥dulo.
    
    Uso:
        python interface.py
    
    La aplicaci√≥n se iniciar√° con:
    - Interfaz gr√°fica moderna
    - C√°mara activada
    - Reconocimiento de voz listo
    - Sistema de respuestas emp√°ticas activo
    """
    app = EmotionalDiaryApp()
    app.run()
