"""
Configuraci√≥n Optimizada del Diario Emocional
--------------------------------------------

Este script configura el proyecto con optimizaciones de rendimiento
y lazy loading habilitado.

Funcionalidades:
- Instalaci√≥n selectiva de dependencias
- Configuraci√≥n de lazy loading
- Optimizaci√≥n de memoria
- Tests de rendimiento

Uso:
    python optimized_setup.py
"""

import subprocess
import sys
import os
import time
from pathlib import Path

def print_header(title):
    """
    Imprime un encabezado formateado.
    """
    print("\n" + "=" * 60)
    print(f"üîß {title}")
    print("=" * 60)

def print_step(step, description):
    """
    Imprime un paso del proceso.
    """
    print(f"\n{step} {description}...")

def run_command_with_timing(command, description):
    """
    Ejecuta un comando midiendo el tiempo.
    """
    print(f"\n‚è±Ô∏è  {description}...")
    start_time = time.time()
    
    try:
        result = subprocess.run(command, shell=True, check=True, 
                              capture_output=True, text=True)
        end_time = time.time()
        elapsed = end_time - start_time
        print(f"‚úÖ Completado en {elapsed:.2f}s")
        return True, elapsed
    except subprocess.CalledProcessError as e:
        end_time = time.time()
        elapsed = end_time - start_time
        print(f"‚ùå Error despu√©s de {elapsed:.2f}s: {e.stderr}")
        return False, elapsed

def install_core_dependencies():
    """
    Instala solo las dependencias principales necesarias para el men√∫.
    """
    print_header("INSTALACI√ìN CORE (Lazy Loading)")
    
    core_packages = [
        "customtkinter==5.2.0",
        "tk==0.1.0", 
        "python-dotenv==1.0.0"
    ]
    
    total_time = 0
    
    for package in core_packages:
        success, elapsed = run_command_with_timing(
            f"{sys.executable} -m pip install {package}",
            f"Instalando {package.split('==')[0]}"
        )
        total_time += elapsed
        if not success:
            return False
    
    print(f"\nüìä Tiempo total instalaci√≥n core: {total_time:.2f}s")
    return True

def install_optional_dependencies():
    """
    Instala dependencias opcionales por categor√≠a.
    """
    print_header("INSTALACI√ìN OPCIONAL (Por Categor√≠a)")
    
    categories = {
        "IA y ML": [
            "transformers==4.34.1",
            "torch==2.1.0",
            "nltk==3.8.1",
            "scikit-learn==1.3.0"
        ],
        "Audio y Video": [
            "SpeechRecognition==3.10.0",
            "librosa==0.10.1",
            "opencv-python"  # Usar opencv-python en lugar de cv2
        ],
        "Datos y Visualizaci√≥n": [
            "pandas==2.1.1",
            "matplotlib==3.7.2",
            "numpy==1.24.3"
        ],
        "Utilidades": [
            "datasets==2.14.5",
            "joblib==1.3.2",
            "Pillow"  # Para PIL
        ]
    }
    
    user_choice = input("\n¬øInstalar todas las categor√≠as? (s/n): ").lower()
    
    if user_choice == 's':
        # Instalar todas
        for category, packages in categories.items():
            print(f"\nüì¶ Instalando categor√≠a: {category}")
            for package in packages:
                run_command_with_timing(
                    f"{sys.executable} -m pip install {package}",
                    f"  ‚îî‚îÄ {package.split('==')[0]}"
                )
    else:
        # Instalaci√≥n selectiva
        print("\nüéØ Instalaci√≥n Selectiva:")
        for i, (category, packages) in enumerate(categories.items(), 1):
            print(f"{i}. {category}: {', '.join([p.split('==')[0] for p in packages])}")
        
        choices = input("Selecciona categor√≠as (ej: 1,3): ").split(',')
        
        for choice in choices:
            try:
                idx = int(choice.strip()) - 1
                category_name = list(categories.keys())[idx]
                packages = list(categories.values())[idx]
                
                print(f"\nüì¶ Instalando: {category_name}")
                for package in packages:
                    run_command_with_timing(
                        f"{sys.executable} -m pip install {package}",
                        f"  ‚îî‚îÄ {package.split('==')[0]}"
                    )
            except (ValueError, IndexError):
                print(f"‚ùå Opci√≥n inv√°lida: {choice}")

def create_lazy_loading_config():
    """
    Crea un archivo de configuraci√≥n para lazy loading.
    """
    print_header("CONFIGURACI√ìN DE LAZY LOADING")
    
    config_content = '''"""
Configuraci√≥n de Lazy Loading - Diario Emocional
-----------------------------------------------

Este archivo controla qu√© m√≥dulos se cargan autom√°ticamente
y cu√°les se cargan bajo demanda.
"""

# Configuraci√≥n de carga de m√≥dulos
LAZY_LOADING_CONFIG = {
    # M√≥dulos que se cargan siempre (aplicaci√≥n b√°sica)
    "always_load": [
        "customtkinter",
        "tkinter", 
        "datetime",
        "threading",
        "time",
        "os",
        "sys"
    ],
    
    # M√≥dulos que se cargan solo para el diario principal
    "diary_modules": [
        "cv2",
        "speech_recognition", 
        "PIL",
        "numpy"
    ],
    
    # M√≥dulos que se cargan solo para IA/ML
    "ai_modules": [
        "transformers",
        "torch",
        "nltk",
        "scikit-learn"
    ],
    
    # M√≥dulos que se cargan solo para estad√≠sticas
    "stats_modules": [
        "matplotlib",
        "pandas"
    ],
    
    # Configuraciones de rendimiento
    "performance": {
        "preload_ai_models": False,  # Si cargar modelos de IA al inicio
        "cache_models": True,        # Si mantener modelos en cach√©
        "lazy_camera": True,         # Si cargar c√°mara solo cuando se use
        "defer_heavy_imports": True  # Si diferir importaciones pesadas
    }
}

def should_preload_module(module_name):
    """
    Determina si un m√≥dulo debe cargarse autom√°ticamente.
    """
    return module_name in LAZY_LOADING_CONFIG["always_load"]

def get_module_category(module_name):
    """
    Obtiene la categor√≠a de un m√≥dulo.
    """
    for category, modules in LAZY_LOADING_CONFIG.items():
        if isinstance(modules, list) and module_name in modules:
            return category
    return "unknown"
'''
    
    config_path = "app/lazy_config.py"
    
    try:
        with open(config_path, "w", encoding="utf-8") as f:
            f.write(config_content)
        print(f"‚úÖ Configuraci√≥n creada: {config_path}")
        return True
    except Exception as e:
        print(f"‚ùå Error creando configuraci√≥n: {e}")
        return False

def run_performance_test():
    """
    Ejecuta una prueba de rendimiento b√°sica.
    """
    print_header("PRUEBA DE RENDIMIENTO")
    
    print("üß™ Ejecutando test de tiempo de inicio...")
    
    # Test del men√∫ principal
    start_time = time.time()
    try:
        # Simular importaci√≥n del men√∫
        import tkinter
        import customtkinter
        end_time = time.time()
        menu_time = (end_time - start_time) * 1000
        print(f"‚úÖ Men√∫ principal: {menu_time:.2f}ms")
    except Exception as e:
        print(f"‚ùå Error en test del men√∫: {e}")
        return False
    
    # Test opcional de m√≥dulos pesados
    test_heavy = input("\n¬øProbar carga de m√≥dulos pesados? (s/n): ").lower()
    
    if test_heavy == 's':
        heavy_modules = {
            "Transformers (IA)": "transformers",
            "OpenCV (Video)": "cv2", 
            "Matplotlib (Gr√°ficos)": "matplotlib"
        }
        
        for name, module in heavy_modules.items():
            start_time = time.time()
            try:
                __import__(module)
                end_time = time.time()
                load_time = (end_time - start_time) * 1000
                print(f"‚úÖ {name}: {load_time:.2f}ms")
            except ImportError:
                print(f"‚ö†Ô∏è  {name}: No instalado")
            except Exception as e:
                print(f"‚ùå {name}: Error - {e}")
    
    return True

def create_launch_scripts():
    """
    Crea scripts de lanzamiento optimizados.
    """
    print_header("SCRIPTS DE LANZAMIENTO")
    
    # Script r√°pido (solo men√∫)
    quick_script = '''@echo off
echo üöÄ Iniciando Diario Emocional (Modo R√°pido)
echo Solo cargando m√≥dulos b√°sicos para el men√∫...
python -m app
pause
'''
    
    # Script completo (todas las caracter√≠sticas)
    full_script = '''@echo off
echo üî• Iniciando Diario Emocional (Modo Completo)
echo Precargando todos los m√≥dulos...
set PRELOAD_ALL_MODULES=1
python -m app
pause
'''
    
    scripts = {
        "quick_start.bat": quick_script,
        "full_start.bat": full_script
    }
    
    for filename, content in scripts.items():
        try:
            with open(filename, "w", encoding="utf-8") as f:
                f.write(content)
            print(f"‚úÖ Script creado: {filename}")
        except Exception as e:
            print(f"‚ùå Error creando {filename}: {e}")

def main():
    """
    Funci√≥n principal de configuraci√≥n optimizada.
    """
    print("üöÄ CONFIGURACI√ìN OPTIMIZADA DEL DIARIO EMOCIONAL")
    print("=" * 80)
    print("Esta configuraci√≥n implementa lazy loading para mejorar el rendimiento.")
    print("Los m√≥dulos se cargar√°n solo cuando se necesiten.")
    
    # Verificar Python
    python_version = sys.version_info
    if python_version.major < 3 or python_version.minor < 8:
        print("‚ùå Error: Se requiere Python 3.8 o superior")
        return
    
    print(f"‚úÖ Python {python_version.major}.{python_version.minor}.{python_version.micro}")
    
    steps = [
        ("Instalar dependencias core", install_core_dependencies),
        ("Instalar dependencias opcionales", install_optional_dependencies),
        ("Crear configuraci√≥n lazy loading", create_lazy_loading_config),
        ("Ejecutar prueba de rendimiento", run_performance_test),
        ("Crear scripts de lanzamiento", create_launch_scripts)
    ]
    
    for step_name, step_function in steps:
        try:
            success = step_function()
            if not success:
                print(f"‚ö†Ô∏è  Fall√≥: {step_name}")
                continue_anyway = input("¬øContinuar de todos modos? (s/n): ").lower()
                if continue_anyway != 's':
                    break
        except KeyboardInterrupt:
            print("\n‚ùå Instalaci√≥n cancelada por el usuario")
            return
        except Exception as e:
            print(f"‚ùå Error inesperado en {step_name}: {e}")
    
    print_header("CONFIGURACI√ìN COMPLETADA")
    print("üéâ ¬°Diario Emocional configurado con optimizaciones!")
    print("\nüìã Resumen de optimizaciones:")
    print("   ‚úÖ Lazy loading habilitado")
    print("   ‚úÖ Carga selectiva de m√≥dulos")
    print("   ‚úÖ Configuraci√≥n personalizable")
    print("   ‚úÖ Scripts de lanzamiento optimizados")
    
    print("\nüöÄ Para iniciar:")
    print("   ‚Ä¢ Modo r√°pido: python -m app")
    print("   ‚Ä¢ Desde script: quick_start.bat")
    print("   ‚Ä¢ Modo completo: full_start.bat")

if __name__ == "__main__":
    main()
